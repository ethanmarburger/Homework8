[
  {
    "objectID": "homework8.html",
    "href": "homework8.html",
    "title": "Homework 8",
    "section": "",
    "text": "Rows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 6 × 14\n  Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n  &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n1 01/12/2017                 254     0              -5.2            37\n2 01/12/2017                 204     1              -5.5            38\n3 01/12/2017                 173     2              -6              39\n4 01/12/2017                 107     3              -6.2            40\n5 01/12/2017                  78     4              -6              36\n6 01/12/2017                 100     5              -6.4            37\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;"
  },
  {
    "objectID": "homework8.html#part-one-data",
    "href": "homework8.html#part-one-data",
    "title": "Homework 8",
    "section": "",
    "text": "Rows: 8760 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 6 × 14\n  Date       `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n  &lt;chr&gt;                    &lt;dbl&gt; &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n1 01/12/2017                 254     0              -5.2            37\n2 01/12/2017                 204     1              -5.5            38\n3 01/12/2017                 173     2              -6              39\n4 01/12/2017                 107     3              -6.2            40\n5 01/12/2017                  78     4              -6              36\n6 01/12/2017                 100     5              -6.4            37\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;dbl&gt;, `Visibility (10m)` &lt;dbl&gt;,\n#   `Dew point temperature(°C)` &lt;dbl&gt;, `Solar Radiation (MJ/m2)` &lt;dbl&gt;,\n#   `Rainfall(mm)` &lt;dbl&gt;, `Snowfall (cm)` &lt;dbl&gt;, Seasons &lt;chr&gt;, Holiday &lt;chr&gt;,\n#   `Functioning Day` &lt;chr&gt;"
  },
  {
    "objectID": "homework8.html#step-two-eda",
    "href": "homework8.html#step-two-eda",
    "title": "Homework 8",
    "section": "Step Two: EDA",
    "text": "Step Two: EDA\n\n1: Checking for missingness\n\n# Checking for missing values across the variable\ncolSums(is.na(data))\n\n                     Date         Rented Bike Count                      Hour \n                        0                         0                         0 \n          Temperature(°C)               Humidity(%)          Wind speed (m/s) \n                        0                         0                         0 \n         Visibility (10m) Dew point temperature(°C)   Solar Radiation (MJ/m2) \n                        0                         0                         0 \n             Rainfall(mm)             Snowfall (cm)                   Seasons \n                        0                         0                         0 \n                  Holiday           Functioning Day \n                        0                         0 \n\n# No missing values\n\n\n\n2: Check the column types and the values within the columns to make sure they make sense\n\n# Checking column types\nglimpse(data)\n\nRows: 8,760\nColumns: 14\n$ Date                        &lt;chr&gt; \"01/12/2017\", \"01/12/2017\", \"01/12/2017\", …\n$ `Rented Bike Count`         &lt;dbl&gt; 254, 204, 173, 107, 78, 100, 181, 460, 930…\n$ Hour                        &lt;dbl&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, …\n$ `Temperature(°C)`           &lt;dbl&gt; -5.2, -5.5, -6.0, -6.2, -6.0, -6.4, -6.6, …\n$ `Humidity(%)`               &lt;dbl&gt; 37, 38, 39, 40, 36, 37, 35, 38, 37, 27, 24…\n$ `Wind speed (m/s)`          &lt;dbl&gt; 2.2, 0.8, 1.0, 0.9, 2.3, 1.5, 1.3, 0.9, 1.…\n$ `Visibility (10m)`          &lt;dbl&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, …\n$ `Dew point temperature(°C)` &lt;dbl&gt; -17.6, -17.6, -17.7, -17.6, -18.6, -18.7, …\n$ `Solar Radiation (MJ/m2)`   &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, …\n$ `Rainfall(mm)`              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ `Snowfall (cm)`             &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ Seasons                     &lt;chr&gt; \"Winter\", \"Winter\", \"Winter\", \"Winter\", \"W…\n$ Holiday                     &lt;chr&gt; \"No Holiday\", \"No Holiday\", \"No Holiday\", …\n$ `Functioning Day`           &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", …\n\n# Summary Statistics for numeric variables\ndata |&gt;\n  summarize(across(where(is.numeric), \n                   list(\"mean\" = ~ mean(.x), \n                        \"median\" = ~ median(.x), \n                        \"sd\" = ~ sd(.x), \n                        \"IQR\" = ~ IQR(.x)),\n                   .names = \"{.fn}_{.col}\")) |&gt; \n  pivot_longer(cols = everything())\n\n# A tibble: 40 × 2\n   name                      value\n   &lt;chr&gt;                     &lt;dbl&gt;\n 1 mean_Rented Bike Count   705.  \n 2 median_Rented Bike Count 504.  \n 3 sd_Rented Bike Count     645.  \n 4 IQR_Rented Bike Count    874.  \n 5 mean_Hour                 11.5 \n 6 median_Hour               11.5 \n 7 sd_Hour                    6.92\n 8 IQR_Hour                  11.5 \n 9 mean_Temperature(°C)      12.9 \n10 median_Temperature(°C)    13.7 \n# ℹ 30 more rows\n\n# Checking unique values for categorical variables\nlapply(data[sapply(data, is.factor) | sapply(data, is.character)], unique)\n\n$Date\n  [1] \"01/12/2017\" \"02/12/2017\" \"03/12/2017\" \"04/12/2017\" \"05/12/2017\"\n  [6] \"06/12/2017\" \"07/12/2017\" \"08/12/2017\" \"09/12/2017\" \"10/12/2017\"\n [11] \"11/12/2017\" \"12/12/2017\" \"13/12/2017\" \"14/12/2017\" \"15/12/2017\"\n [16] \"16/12/2017\" \"17/12/2017\" \"18/12/2017\" \"19/12/2017\" \"20/12/2017\"\n [21] \"21/12/2017\" \"22/12/2017\" \"23/12/2017\" \"24/12/2017\" \"25/12/2017\"\n [26] \"26/12/2017\" \"27/12/2017\" \"28/12/2017\" \"29/12/2017\" \"30/12/2017\"\n [31] \"31/12/2017\" \"01/01/2018\" \"02/01/2018\" \"03/01/2018\" \"04/01/2018\"\n [36] \"05/01/2018\" \"06/01/2018\" \"07/01/2018\" \"08/01/2018\" \"09/01/2018\"\n [41] \"10/01/2018\" \"11/01/2018\" \"12/01/2018\" \"13/01/2018\" \"14/01/2018\"\n [46] \"15/01/2018\" \"16/01/2018\" \"17/01/2018\" \"18/01/2018\" \"19/01/2018\"\n [51] \"20/01/2018\" \"21/01/2018\" \"22/01/2018\" \"23/01/2018\" \"24/01/2018\"\n [56] \"25/01/2018\" \"26/01/2018\" \"27/01/2018\" \"28/01/2018\" \"29/01/2018\"\n [61] \"30/01/2018\" \"31/01/2018\" \"01/02/2018\" \"02/02/2018\" \"03/02/2018\"\n [66] \"04/02/2018\" \"05/02/2018\" \"06/02/2018\" \"07/02/2018\" \"08/02/2018\"\n [71] \"09/02/2018\" \"10/02/2018\" \"11/02/2018\" \"12/02/2018\" \"13/02/2018\"\n [76] \"14/02/2018\" \"15/02/2018\" \"16/02/2018\" \"17/02/2018\" \"18/02/2018\"\n [81] \"19/02/2018\" \"20/02/2018\" \"21/02/2018\" \"22/02/2018\" \"23/02/2018\"\n [86] \"24/02/2018\" \"25/02/2018\" \"26/02/2018\" \"27/02/2018\" \"28/02/2018\"\n [91] \"01/03/2018\" \"02/03/2018\" \"03/03/2018\" \"04/03/2018\" \"05/03/2018\"\n [96] \"06/03/2018\" \"07/03/2018\" \"08/03/2018\" \"09/03/2018\" \"10/03/2018\"\n[101] \"11/03/2018\" \"12/03/2018\" \"13/03/2018\" \"14/03/2018\" \"15/03/2018\"\n[106] \"16/03/2018\" \"17/03/2018\" \"18/03/2018\" \"19/03/2018\" \"20/03/2018\"\n[111] \"21/03/2018\" \"22/03/2018\" \"23/03/2018\" \"24/03/2018\" \"25/03/2018\"\n[116] \"26/03/2018\" \"27/03/2018\" \"28/03/2018\" \"29/03/2018\" \"30/03/2018\"\n[121] \"31/03/2018\" \"01/04/2018\" \"02/04/2018\" \"03/04/2018\" \"04/04/2018\"\n[126] \"05/04/2018\" \"06/04/2018\" \"07/04/2018\" \"08/04/2018\" \"09/04/2018\"\n[131] \"10/04/2018\" \"11/04/2018\" \"12/04/2018\" \"13/04/2018\" \"14/04/2018\"\n[136] \"15/04/2018\" \"16/04/2018\" \"17/04/2018\" \"18/04/2018\" \"19/04/2018\"\n[141] \"20/04/2018\" \"21/04/2018\" \"22/04/2018\" \"23/04/2018\" \"24/04/2018\"\n[146] \"25/04/2018\" \"26/04/2018\" \"27/04/2018\" \"28/04/2018\" \"29/04/2018\"\n[151] \"30/04/2018\" \"01/05/2018\" \"02/05/2018\" \"03/05/2018\" \"04/05/2018\"\n[156] \"05/05/2018\" \"06/05/2018\" \"07/05/2018\" \"08/05/2018\" \"09/05/2018\"\n[161] \"10/05/2018\" \"11/05/2018\" \"12/05/2018\" \"13/05/2018\" \"14/05/2018\"\n[166] \"15/05/2018\" \"16/05/2018\" \"17/05/2018\" \"18/05/2018\" \"19/05/2018\"\n[171] \"20/05/2018\" \"21/05/2018\" \"22/05/2018\" \"23/05/2018\" \"24/05/2018\"\n[176] \"25/05/2018\" \"26/05/2018\" \"27/05/2018\" \"28/05/2018\" \"29/05/2018\"\n[181] \"30/05/2018\" \"31/05/2018\" \"01/06/2018\" \"02/06/2018\" \"03/06/2018\"\n[186] \"04/06/2018\" \"05/06/2018\" \"06/06/2018\" \"07/06/2018\" \"08/06/2018\"\n[191] \"09/06/2018\" \"10/06/2018\" \"11/06/2018\" \"12/06/2018\" \"13/06/2018\"\n[196] \"14/06/2018\" \"15/06/2018\" \"16/06/2018\" \"17/06/2018\" \"18/06/2018\"\n[201] \"19/06/2018\" \"20/06/2018\" \"21/06/2018\" \"22/06/2018\" \"23/06/2018\"\n[206] \"24/06/2018\" \"25/06/2018\" \"26/06/2018\" \"27/06/2018\" \"28/06/2018\"\n[211] \"29/06/2018\" \"30/06/2018\" \"01/07/2018\" \"02/07/2018\" \"03/07/2018\"\n[216] \"04/07/2018\" \"05/07/2018\" \"06/07/2018\" \"07/07/2018\" \"08/07/2018\"\n[221] \"09/07/2018\" \"10/07/2018\" \"11/07/2018\" \"12/07/2018\" \"13/07/2018\"\n[226] \"14/07/2018\" \"15/07/2018\" \"16/07/2018\" \"17/07/2018\" \"18/07/2018\"\n[231] \"19/07/2018\" \"20/07/2018\" \"21/07/2018\" \"22/07/2018\" \"23/07/2018\"\n[236] \"24/07/2018\" \"25/07/2018\" \"26/07/2018\" \"27/07/2018\" \"28/07/2018\"\n[241] \"29/07/2018\" \"30/07/2018\" \"31/07/2018\" \"01/08/2018\" \"02/08/2018\"\n[246] \"03/08/2018\" \"04/08/2018\" \"05/08/2018\" \"06/08/2018\" \"07/08/2018\"\n[251] \"08/08/2018\" \"09/08/2018\" \"10/08/2018\" \"11/08/2018\" \"12/08/2018\"\n[256] \"13/08/2018\" \"14/08/2018\" \"15/08/2018\" \"16/08/2018\" \"17/08/2018\"\n[261] \"18/08/2018\" \"19/08/2018\" \"20/08/2018\" \"21/08/2018\" \"22/08/2018\"\n[266] \"23/08/2018\" \"24/08/2018\" \"25/08/2018\" \"26/08/2018\" \"27/08/2018\"\n[271] \"28/08/2018\" \"29/08/2018\" \"30/08/2018\" \"31/08/2018\" \"01/09/2018\"\n[276] \"02/09/2018\" \"03/09/2018\" \"04/09/2018\" \"05/09/2018\" \"06/09/2018\"\n[281] \"07/09/2018\" \"08/09/2018\" \"09/09/2018\" \"10/09/2018\" \"11/09/2018\"\n[286] \"12/09/2018\" \"13/09/2018\" \"14/09/2018\" \"15/09/2018\" \"16/09/2018\"\n[291] \"17/09/2018\" \"18/09/2018\" \"19/09/2018\" \"20/09/2018\" \"21/09/2018\"\n[296] \"22/09/2018\" \"23/09/2018\" \"24/09/2018\" \"25/09/2018\" \"26/09/2018\"\n[301] \"27/09/2018\" \"28/09/2018\" \"29/09/2018\" \"30/09/2018\" \"01/10/2018\"\n[306] \"02/10/2018\" \"03/10/2018\" \"04/10/2018\" \"05/10/2018\" \"06/10/2018\"\n[311] \"07/10/2018\" \"08/10/2018\" \"09/10/2018\" \"10/10/2018\" \"11/10/2018\"\n[316] \"12/10/2018\" \"13/10/2018\" \"14/10/2018\" \"15/10/2018\" \"16/10/2018\"\n[321] \"17/10/2018\" \"18/10/2018\" \"19/10/2018\" \"20/10/2018\" \"21/10/2018\"\n[326] \"22/10/2018\" \"23/10/2018\" \"24/10/2018\" \"25/10/2018\" \"26/10/2018\"\n[331] \"27/10/2018\" \"28/10/2018\" \"29/10/2018\" \"30/10/2018\" \"31/10/2018\"\n[336] \"01/11/2018\" \"02/11/2018\" \"03/11/2018\" \"04/11/2018\" \"05/11/2018\"\n[341] \"06/11/2018\" \"07/11/2018\" \"08/11/2018\" \"09/11/2018\" \"10/11/2018\"\n[346] \"11/11/2018\" \"12/11/2018\" \"13/11/2018\" \"14/11/2018\" \"15/11/2018\"\n[351] \"16/11/2018\" \"17/11/2018\" \"18/11/2018\" \"19/11/2018\" \"20/11/2018\"\n[356] \"21/11/2018\" \"22/11/2018\" \"23/11/2018\" \"24/11/2018\" \"25/11/2018\"\n[361] \"26/11/2018\" \"27/11/2018\" \"28/11/2018\" \"29/11/2018\" \"30/11/2018\"\n\n$Seasons\n[1] \"Winter\" \"Spring\" \"Summer\" \"Autumn\"\n\n$Holiday\n[1] \"No Holiday\" \"Holiday\"   \n\n$`Functioning Day`\n[1] \"Yes\" \"No\" \n\n# Functioning Day variables are vague. May change later.  \n\n\n\n3, 4, 5: Convert the Date column into an actual date (if need be). Recall the lubridate package. Turn the character variables (Seasons, Holiday, and Functioning Day) into factors. Rename the all the variables to have easy to use names.\n\ndata &lt;- data |&gt;\n  mutate(\n    date = as_date(dmy(Date)),  # Reclassifies the date variable as Date\n    Seasons = as.factor(Seasons),  # Converts Seasons to a factor\n    Holiday = as.factor(Holiday),  # Converts Holiday to a factor\n    `Functioning Day` = as.factor(`Functioning Day`)) |&gt; # Converts `Functioning Day` to a factor\n  rename( # Changing variable names for ease of use\n    rented_bike_count = \"Rented Bike Count\",\n    hour = \"Hour\",\n    temperature = \"Temperature(°C)\",\n    humidity = \"Humidity(%)\",\n    wind_speed = \"Wind speed (m/s)\",\n    visibility = \"Visibility (10m)\",\n    dew_point_temp = \"Dew point temperature(°C)\",\n    solar_radiation = \"Solar Radiation (MJ/m2)\",\n    rainfall = \"Rainfall(mm)\",\n    snowfall = \"Snowfall (cm)\",\n    seasons = \"Seasons\",\n    holiday = \"Holiday\",\n    functioning = \"Functioning Day\") |&gt;\n  select( # Selecting relavent variables\n    date, \n    rented_bike_count, \n    hour, \n    temperature, \n    humidity, \n    wind_speed, \n    visibility, \n    dew_point_temp, \n    solar_radiation, \n    rainfall, \n    snowfall, \n    seasons, \n    holiday, \n    functioning)\n\n\n\n6: Create summary statistics (especially related to the bike rental count)\n\n# Summary Stats across numeric variables is done above\n# Summary Statistics across categorical variabels\ndata |&gt;\n  group_by(rented_bike_count, functioning) |&gt;\n  summarize(count = n())\n\n`summarise()` has grouped output by 'rented_bike_count'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 2,166 × 3\n# Groups:   rented_bike_count [2,166]\n   rented_bike_count functioning count\n               &lt;dbl&gt; &lt;fct&gt;       &lt;int&gt;\n 1                 0 No            295\n 2                 2 Yes             3\n 3                 3 Yes             2\n 4                 4 Yes             5\n 5                 5 Yes             3\n 6                 6 Yes             3\n 7                 7 Yes             4\n 8                 8 Yes             7\n 9                 9 Yes            12\n10                10 Yes             7\n# ℹ 2,156 more rows\n\n# rented_bike_data across functioning = \"No\" has 295 values\n\n\n# Summary Statistics across categorical variabels\ndata |&gt;\n  group_by(rented_bike_count, seasons, holiday) |&gt;\n  summarize(count = n())\n\n`summarise()` has grouped output by 'rented_bike_count', 'seasons'. You can\noverride using the `.groups` argument.\n\n\n# A tibble: 4,728 × 4\n# Groups:   rented_bike_count, seasons [4,461]\n   rented_bike_count seasons holiday    count\n               &lt;dbl&gt; &lt;fct&gt;   &lt;fct&gt;      &lt;int&gt;\n 1                 0 Autumn  Holiday       24\n 2                 0 Autumn  No Holiday   223\n 3                 0 Spring  No Holiday    48\n 4                 2 Autumn  No Holiday     1\n 5                 2 Spring  No Holiday     2\n 6                 3 Winter  Holiday        2\n 7                 4 Autumn  No Holiday     1\n 8                 4 Spring  No Holiday     1\n 9                 4 Winter  Holiday        3\n10                 5 Autumn  No Holiday     2\n# ℹ 4,718 more rows\n\n\n\n# Sub setting data to only include rentals during functioning hours\ndata &lt;- data |&gt;\n  filter(functioning == \"Yes\")\n\n\n\n7: To simplify our analysis, we’ll summarize across the hours so that each day has one observation associated with it.\n\ndata &lt;- data |&gt;\n  group_by(date, seasons, holiday) |&gt; #grouping variables\n  summarize( # variable sums and means\n    total_bike_count = sum(rented_bike_count),\n    total_rainfall = sum(rainfall),\n    total_snowfall = sum(snowfall),\n    mean_temperature = mean(temperature),\n    mean_humidity = mean(humidity),\n    mean_wind_speed = mean(wind_speed),\n    mean_visibility = mean(visibility),\n    mean_dew_point_temp = mean(dew_point_temp),\n    mean_solar_radiation = mean(solar_radiation),\n    mean_rainfall = mean(rainfall),\n    mean_snowfall = mean(snowfall))\n\n`summarise()` has grouped output by 'date', 'seasons'. You can override using\nthe `.groups` argument.\n\n\n\n\n8: Recreate your basic summary stats and then create some plots to explore relationships. Report correlation between your numeric variables as well.\n\n# Basic summary statistics\nsummary(data)\n\n      date              seasons         holiday    total_bike_count\n Min.   :2017-12-01   Autumn:81   Holiday   : 17   Min.   :  977   \n 1st Qu.:2018-02-27   Spring:90   No Holiday:336   1st Qu.: 6967   \n Median :2018-05-28   Summer:92                    Median :18563   \n Mean   :2018-05-28   Winter:90                    Mean   :17485   \n 3rd Qu.:2018-08-24                                3rd Qu.:26285   \n Max.   :2018-11-30                                Max.   :36149   \n total_rainfall   total_snowfall   mean_temperature  mean_humidity  \n Min.   : 0.000   Min.   : 0.000   Min.   :-14.738   Min.   :22.25  \n 1st Qu.: 0.000   1st Qu.: 0.000   1st Qu.:  3.304   1st Qu.:47.58  \n Median : 0.000   Median : 0.000   Median : 13.738   Median :57.17  \n Mean   : 3.576   Mean   : 1.863   Mean   : 12.776   Mean   :58.17  \n 3rd Qu.: 0.500   3rd Qu.: 0.000   3rd Qu.: 22.592   3rd Qu.:67.71  \n Max.   :95.500   Max.   :78.700   Max.   : 33.742   Max.   :95.88  \n mean_wind_speed  mean_visibility  mean_dew_point_temp mean_solar_radiation\n Min.   :0.6625   Min.   : 214.3   Min.   :-27.750     Min.   :0.02917     \n 1st Qu.:1.3042   1st Qu.:1087.0   1st Qu.: -5.188     1st Qu.:0.28333     \n Median :1.6583   Median :1557.8   Median :  4.612     Median :0.56500     \n Mean   :1.7261   Mean   :1434.0   Mean   :  3.954     Mean   :0.56773     \n 3rd Qu.:1.9542   3rd Qu.:1874.3   3rd Qu.: 14.921     3rd Qu.:0.82000     \n Max.   :4.0000   Max.   :2000.0   Max.   : 25.038     Max.   :1.21667     \n mean_rainfall     mean_snowfall    \n Min.   :0.00000   Min.   :0.00000  \n 1st Qu.:0.00000   1st Qu.:0.00000  \n Median :0.00000   Median :0.00000  \n Mean   :0.15072   Mean   :0.07762  \n 3rd Qu.:0.02083   3rd Qu.:0.00000  \n Max.   :3.97917   Max.   :3.27917  \n\n\n\n# Scatter Plots showing relationship between bike rentals and temperature\ng &lt;- ggplot(data, aes(x = total_bike_count, \n                      y = mean_temperature,\n                      color = seasons))\ng + geom_point()\n\n\n\n\n\n\n\n\n\n# Scatter Plots showing relationship between bike rentals and rainfall\ns &lt;- ggplot(data, aes(x = total_bike_count, \n                      y = mean_temperature,\n                      color = holiday))\ns + geom_point()\n\n\n\n\n\n\n\n\n\n# Scatter Plots showing relationship between bike rentals and wind speed\nh &lt;- ggplot(data, aes(x = total_bike_count, \n                      y = mean_wind_speed,\n                      color = seasons))\nh + geom_point()\n\n\n\n\n\n\n\n\n\n# Correlation between numeric variables\ncor(data[sapply(data, is.numeric)], use = \"complete.obs\")\n\n                     total_bike_count total_rainfall total_snowfall\ntotal_bike_count           1.00000000    -0.23910905    -0.26529110\ntotal_rainfall            -0.23910905     1.00000000    -0.02313404\ntotal_snowfall            -0.26529110    -0.02313404     1.00000000\nmean_temperature           0.75307673     0.14451727    -0.26696366\nmean_humidity              0.03588697     0.52864263     0.06539191\nmean_wind_speed           -0.19288142    -0.10167578     0.02088156\nmean_visibility            0.16599375    -0.22199387    -0.10188902\nmean_dew_point_temp        0.65047655     0.26456621    -0.20955286\nmean_solar_radiation       0.73589290    -0.32270413    -0.23343056\nmean_rainfall             -0.23686365     0.99791474    -0.02360438\nmean_snowfall             -0.26529110    -0.02313404     1.00000000\n                     mean_temperature mean_humidity mean_wind_speed\ntotal_bike_count          0.753076732    0.03588697     -0.19288142\ntotal_rainfall            0.144517274    0.52864263     -0.10167578\ntotal_snowfall           -0.266963662    0.06539191      0.02088156\nmean_temperature          1.000000000    0.40416749     -0.26072179\nmean_humidity             0.404167486    1.00000000     -0.23425778\nmean_wind_speed          -0.260721792   -0.23425778      1.00000000\nmean_visibility           0.002336683   -0.55917733      0.20602264\nmean_dew_point_temp       0.962796255    0.63204729     -0.28770322\nmean_solar_radiation      0.550274301   -0.27444967      0.09612635\nmean_rainfall             0.144573425    0.52795952     -0.09863450\nmean_snowfall            -0.266963662    0.06539191      0.02088156\n                     mean_visibility mean_dew_point_temp mean_solar_radiation\ntotal_bike_count         0.165993749           0.6504765           0.73589290\ntotal_rainfall          -0.221993866           0.2645662          -0.32270413\ntotal_snowfall          -0.101889019          -0.2095529          -0.23343056\nmean_temperature         0.002336683           0.9627963           0.55027430\nmean_humidity           -0.559177334           0.6320473          -0.27444967\nmean_wind_speed          0.206022636          -0.2877032           0.09612635\nmean_visibility          1.000000000          -0.1535516           0.27139591\nmean_dew_point_temp     -0.153551591           1.0000000           0.38315713\nmean_solar_radiation     0.271395906           0.3831571           1.00000000\nmean_rainfall           -0.218236382           0.2644913          -0.32079734\nmean_snowfall           -0.101889019          -0.2095529          -0.23343056\n                     mean_rainfall mean_snowfall\ntotal_bike_count       -0.23686365   -0.26529110\ntotal_rainfall          0.99791474   -0.02313404\ntotal_snowfall         -0.02360438    1.00000000\nmean_temperature        0.14457343   -0.26696366\nmean_humidity           0.52795952    0.06539191\nmean_wind_speed        -0.09863450    0.02088156\nmean_visibility        -0.21823638   -0.10188902\nmean_dew_point_temp     0.26449127   -0.20955286\nmean_solar_radiation   -0.32079734   -0.23343056\nmean_rainfall           1.00000000   -0.02360438\nmean_snowfall          -0.02360438    1.00000000"
  },
  {
    "objectID": "homework8.html#step-three-split-the-data",
    "href": "homework8.html#step-three-split-the-data",
    "title": "Homework 8",
    "section": "Step Three: Split the Data",
    "text": "Step Three: Split the Data\n\n1: Use functions from tidymodels to split the data into a training and test set (75/25 split). Use the strata argument to stratify the split on the seasons variable.\n\n# splitting data into training (75%) and test (25%) set\ndata_split &lt;- initial_split(data, prop = 0.75, strata = seasons)\ndata_train &lt;- training(data_split) # Training data set\ndata_test &lt;- testing(data_split) # Test data set\nhead(data_train)\n\n# A tibble: 6 × 14\n# Groups:   date, seasons [6]\n  date       seasons holiday    total_bike_count total_rainfall total_snowfall\n  &lt;date&gt;     &lt;fct&gt;   &lt;fct&gt;                 &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n1 2018-09-01 Autumn  No Holiday            26010            0                0\n2 2018-09-02 Autumn  No Holiday            26881            0                0\n3 2018-09-03 Autumn  No Holiday            10802           34.5              0\n4 2018-09-04 Autumn  No Holiday            29529            0                0\n5 2018-09-05 Autumn  No Holiday            31114            0                0\n6 2018-09-08 Autumn  No Holiday            29813            0                0\n# ℹ 8 more variables: mean_temperature &lt;dbl&gt;, mean_humidity &lt;dbl&gt;,\n#   mean_wind_speed &lt;dbl&gt;, mean_visibility &lt;dbl&gt;, mean_dew_point_temp &lt;dbl&gt;,\n#   mean_solar_radiation &lt;dbl&gt;, mean_rainfall &lt;dbl&gt;, mean_snowfall &lt;dbl&gt;\n\n\n\n\n2: On the training set, create a 10 fold CV split\n\n# Had issue with 10 fold CV, wasn't saving folds\n# This seemed to solve my issue\n\n# Storing training data in object\nfold_data &lt;- data_train[1:263, ]\n\n# 10 fold CV\nfold_cv &lt;- vfold_cv(fold_data, v = 10)"
  },
  {
    "objectID": "homework8.html#step-four-fitting-a-multiple-regression-model",
    "href": "homework8.html#step-four-fitting-a-multiple-regression-model",
    "title": "Homework 8",
    "section": "Step Four: Fitting a Multiple Regression Model",
    "text": "Step Four: Fitting a Multiple Regression Model\n\nRecipe 1\nIngredients: (A) Use the date variable to create a weekday/weekend (factor) variable. Then remove the date variable (B) Standardize the numeric variables (C) Create dummy variables for the seasons, holiday, and our new day type variable\n\nrec_1 &lt;- recipe(total_bike_count ~ ., data = data_train) |&gt;\n  \n  # Extract day of the week from date column\n  step_date(date, features = \"dow\", keep_original_cols = TRUE) |&gt;\n  \n  step_mutate(dow = lubridate::wday(date)) |&gt;\n  \n  # Create day type variable based on \"week\" column\n  step_mutate(day_type = factor(if_else(\n    dow == 1 | dow == 7,\n    \"weekend\",\n    \"weekday\"))) |&gt;\n  \n  # Remove \"dow\" column as it is no longer needed\n  step_rm(dow) |&gt;\n  \n  # Standardize numeric predictors\n  step_normalize(all_numeric_predictors()) |&gt;\n  \n  # Create dummy variables for factor variables\n  step_dummy(all_nominal_predictors())\n\n\n\nRecipe 2\nIngredients: (A) Same as above (B) Add in interactions between seasons and holiday, seasons and temp, temp and rainfall\n\nrec_2 &lt;- recipe(total_bike_count ~ ., data = data_train) |&gt;\n  \n  # Extract day of the week from date column\n  step_date(date, features = \"dow\", keep_original_cols = TRUE) |&gt;\n  \n  step_mutate(dow = lubridate::wday(date)) |&gt;\n  \n  # Create day type variable based on \"week\" column\n  step_mutate(day_type = factor(if_else(\n    dow == 1 | dow == 7,\n    \"weekend\",\n    \"weekday\"))) |&gt;\n  \n  # Remove \"dow\" column as it is no longer needed\n  step_rm(dow) |&gt;\n  \n  # Standardize numeric predictors\n  step_normalize(all_numeric_predictors()) |&gt;\n  \n  # Create dummy variables for factor variables\n  step_dummy(all_nominal_predictors()) |&gt;\n  \n  # Interactions between seasons and holiday, seasons and temp, temp and rainfall\n  step_interact(terms = ~seasons * holiday + seasons * mean_temperature + mean_temperature * total_rainfall)\n\n\n\nRecipe 3\nIngredients: (A) Same as 2nd recipe (B) Add in quadratic terms for each numeric predictor\n\nrec_3 &lt;- recipe(total_bike_count ~ ., data = data_train) |&gt;\n  \n  # Extract day of the week from date column\n  step_date(date, features = \"dow\", keep_original_cols = TRUE) |&gt;\n  \n  step_mutate(dow = lubridate::wday(date)) |&gt;\n  \n  # Create day type variable based on \"week\" column\n  step_mutate(day_type = factor(if_else(\n    dow == 1 | dow == 7,\n    \"weekend\",\n    \"weekday\"))) |&gt;\n  \n  # Remove \"dow\" column as it is no longer needed\n  step_rm(dow) |&gt;\n  \n  # Standardize numeric predictors\n  step_normalize(all_numeric_predictors()) |&gt;\n  \n  # Create dummy variables for factor variables\n  step_dummy(all_nominal_predictors()) |&gt;\n  \n  # Interactions between seasons and holiday, seasons and temp, temp and rainfall\n  step_interact(terms = ~seasons * holiday + seasons * mean_temperature + mean_temperature * total_rainfall) |&gt;\n  \n  # Add in quadratic terms for each numeric predictor\n  step_poly(all_numeric_predictors(), degree = 2)\n\n\n\nSetting up linear model fit using the “lm” engine\n\n# Linear regression model with \"lm\" engine\nlm_model &lt;- linear_reg() |&gt;\n  set_engine(\"lm\")\n\n\n\nCombining Recipes and Model into a Workflow\n\n# rec_1 and model\nworkflow_1 &lt;- workflow() |&gt;\n  add_recipe(rec_1) |&gt;\n  add_model(lm_model)\n\n# rec_2 and model\nworkflow_2 &lt;- workflow() |&gt;\n  add_recipe(rec_2) |&gt;\n  add_model(lm_model)\n\n# rec_3 and model\nworkflow_3 &lt;- workflow() |&gt;\n  add_recipe(rec_3) |&gt;\n  add_model(lm_model)\n\n\n\nFit the models using 10 fold CV via fit_resamples() and consider the training set CV error to choose a best model\n\n# Fitting Model 1\nmodel_1_fit &lt;- fit_resamples(\n  workflow_1,\n  resamples = fold_cv, # 10-fold cross-validation from previous fold\n  metrics = metric_set(rmse, rsq)) # Evaluation metrics\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n# Fitting Model 2\nmodel_2_fit &lt;- fit_resamples(\n  workflow_2,\n  resamples = fold_cv, # 10-fold cross-validation from previous fold\n  metrics = metric_set(rmse, rsq)) # Evaluation metrics\n\n→ A | warning: ! Interaction specification failed for:\n               ~seasons * holiday + seasons * mean_temperature + mean_temperature *\n               total_rainfall\n               ℹ No interactions will be created\n\n\n→ B | error:   Error in `step_interact()`:\n               Caused by error in `rlang::f_rhs()`:\n               ! `x` must be a formula\n\n\nThere were issues with some computations   A: x5   B: x5\n\n\nThere were issues with some computations   A: x10   B: x10\n\n\n\n\n\nWarning: All models failed. Run `show_notes(.Last.tune.result)` for more\ninformation.\n\n# Fitting Model 3\nmodel_3_fit &lt;- fit_resamples(\n  workflow_3,\n  resamples = fold_cv, # 10-fold cross-validation from previous fold\n  metrics = metric_set(rmse, rsq)) # Evaluation metrics\n\n→ A | warning: ! Interaction specification failed for:\n               ~seasons * holiday + seasons * mean_temperature + mean_temperature *\n               total_rainfall\n               ℹ No interactions will be created\n\n\n→ B | error:   Error in `step_interact()`:\n               Caused by error in `rlang::f_rhs()`:\n               ! `x` must be a formula\n\n\nThere were issues with some computations   A: x10   B: x9\n\n\nThere were issues with some computations   A: x10   B: x10\n\n\n\n\n\nWarning: All models failed. Run `show_notes(.Last.tune.result)` for more\ninformation.\n\n\nCould not get models 2 and 3 to run…\nI believe the issue is the step_interaction() syntax… Spent a lot of time trying to debug it… :(\nSince model_1_fit is the only model to run, by default it is my best model.\n\n\nViewing model Metrics\n\n# Getting model_1_fit rmse and rsq metrics\ncollect_metrics(model_1_fit)\n\n# A tibble: 2 × 6\n  .metric .estimator     mean     n  std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;         &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   4017.       10 245.     Preprocessor1_Model1\n2 rsq     standard      0.841    10   0.0215 Preprocessor1_Model1\n\n\n\n\nFitting model to entire training set\n\n# Fitting model to entire training set\nmodel_1_full_fit &lt;- last_fit(\n  workflow_1,\n  split = data_split)\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n# Checking metrics\ncollect_metrics(model_1_full_fit)\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard    4554.    Preprocessor1_Model1\n2 rsq     standard       0.795 Preprocessor1_Model1\n\n\nFull Training Set RMSE = 4011.6345628\n\n\nObtain the final model (fit on the entire training set) coefficient table using extract_fit_parsnip() and tidy().\n\n# Extract and view the final model's coefficient table\ncoef_table &lt;- model_1_full_fit |&gt;\n  extract_fit_parsnip() |&gt;\n  tidy()\n\n# Display the coefficient table\ncoef_table\n\n# A tibble: 23 × 5\n   term                 estimate std.error statistic  p.value\n   &lt;chr&gt;                   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)          453120.  163998.       2.76  6.17e- 3\n 2 date                    -24.6      9.21    -2.67  8.08e- 3\n 3 total_rainfall        -1844.    3494.      -0.528 5.98e- 1\n 4 total_snowfall         -301.     266.      -1.13  2.59e- 1\n 5 mean_temperature      -7263.    4600.      -1.58  1.16e- 1\n 6 mean_humidity         -4032.    1802.      -2.24  2.62e- 2\n 7 mean_wind_speed        -745.     276.      -2.70  7.46e- 3\n 8 mean_visibility        -329.     350.      -0.941 3.48e- 1\n 9 mean_dew_point_temp   13176.    5412.       2.43  1.56e- 2\n10 mean_solar_radiation   4389.     461.       9.53  1.79e-18\n# ℹ 13 more rows"
  }
]